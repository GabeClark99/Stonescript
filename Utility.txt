/* ---UTILITY FUNCTIONS--- */

var cooldownWindow = ascii
╔═Cooldowns═╗
║BFG-ATK####║
║MSK-ATK####║
║BS-DASH####║
║QS-DASH####║
║DS-DASH####║
║MS-DODG####║
╚═══════════╝
asciiend

func DisplayTime(offX, offY)
	?IsCombatArea()
		>`@offX@,@offY++@,
		^Best Time = @loc.bestTime/30@
		>`@offX@,@offY++@,
		^Average Time = @loc.averageTime/30@
		>`@offX@,@offY++@,
		^Current Time = @totaltime/30@

func DisplayCooldowns(offX, offY)
	?IsCombatArea()
		>`@offX@,@offY@,#white,@cooldownWindow@

		var contextX = offX + 9
		var contextY = offY + 1

		var cooldownValues = [
		^item.GetCooldown("blade"),
		^item.GetCooldown("mask"),
		^item.GetCooldown("bash"),
		^item.GetCooldown("quarterstaff"),
		^item.GetCooldown("dash"),
		^item.GetCooldown("mind")
		]

		for i = 0 .. 6 - 1
			?cooldownValues[i] <= 0
				>`@contextX@,@contextY++@,#green,RDY
			:
				>`@contextX@,@contextY++@,#red,@cooldownValues[i]/30 + "s"@

		cooldownValues.Clear()

func Equips_NonCombat()
	?item.GetCooldown("quarterstaff") = 0
		equip quarterstaff
		?item.CanActivate("quarterstaff")
			activate R
	:
		equipL trisk

		?pickup.distance < 15
			equipR star
		:
			equipR oro

func DashIfCan()
  ?foe.distance <= 16 & foe.distance >= 11
    ?item.GetCooldown("bash") <= 0
      equipR bash
		:?item.GetCooldown("quarterstaff") <= 0
			equip quarterstaff
			?item.CanActivate("quarterstaff")
			activate R
    :?item.GetCooldown("dash") <= 0
      equipR dash

	:?foe.distance > 6
		?item.GetCooldown("quarterstaff") <= 0
			equip quarterstaff
			?item.CanActivate("quarterstaff")
				activate R

func DodgeIfCan()
  ?item.GetCooldown("mind") <= 0
    equipR mind

func UsePotionIfCan()
  ?hp < 10
    activate potion

func UseBladeIfCan()
  ?foe.count >= 10
  ^&item.GetCooldown("blade") <= 0
    equip blade
		?item.CanActivate("blade")
			activate R

func UseMaskIfCan()
  ?item.GetCooldown("mask") <= 0 & buffs.count > 0 
	^& foe.distance < 40 & foe.state ! 1
    equip mask
    ?item.CanActivate("mask")
			activate R

func ShouldApplyPoison()
  var dbStr = foe.debuffs.string

  ?dbStr ! "debuff_damage"
    return true
  :
    var dbStrArr = string.Split(dbStr, ",")
    var dmgDbStr
    for value : dbStrArr
      ?value = "debuff_damage"
        dmgDbStr = value

    var dmgDbFields = 
    ^string.Split(dmgDbStr, ":")
    var dmgDbIndex = 
    ^dmgDbFields.IndexOf("debuff_damage")

    var framesLeftStr = 
    ^dmgDbFields[dmgDbIndex+2]
    var framesLeftInt = 
    ^int.Parse(framesLeftStr)

    ?foe.distance <= 6
      ?framesLeftInt < 15
        return true
      :
        return false
    :?foe.distance <= 20
      ?framesLeftInt < 30
        return true
      :
        return false
    :
      return false

func IsCombatArea()
	?foe.distance < 9999
		return true
	:
		return false
