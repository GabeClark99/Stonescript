/* ---UTILITY FUNCTIONS--- */

func DisplayCooldowns(offX, offY)
	?IsCombatArea()
		>`@offX@,@offY@,#white,ascii
╔═Cooldowns═╗
║BFG-ATK    ║
║MSK-ATK    ║
║BS-DASH    ║
║QS-DASH    ║
║DS-DASH    ║
║MS-DODG    ║
╚═══════════╝
asciiend

		var contextX = offX + 9
		var contextY = offY + 1

		var cooldownValues = [
		^item.GetCooldown("blade"),
		^item.GetCooldown("mask"),
		^item.GetCooldown("bash"),
		^item.GetCooldown("quarterstaff"),
		^item.GetCooldown("dash"),
		^item.GetCooldown("mind")
		]

		for i = 0 .. 6 - 1
			?cooldownValues[i] <= 0
				>`@contextX@,@contextY++@,#green,RDY
			:
				>`@contextX@,@contextY++@,#red,@cooldownValues[i]/30 + "s"@

		cooldownValues.Clear()

func DisplayFoeStats(offX, offY)
	?IsCombatArea()
		>`@offX@,@offY@,#white,ascii
╔═══Foe═══╗
║STATE    ║
║TIME     ║
╚═════════╝
asciiend

		var contextX = offX + 7
		var contextY = offY + 1

		>`@contextX@,@contextY++@,#white,@foe.state@
		>`@contextX@,@contextY++@,#white,@foe.time@

func DisplayTime(offX, offY)
	?IsCombatArea()
		>`@offX@,@offY@,#white,ascii
╔══Time══╗
║BST     ║
║AVG     ║
║CUR     ║
╚════════╝
asciiend
		var contextX = offX + 5
		var contextY = offY + 1

		>`@contextX@,@contextY++@,#white,@loc.bestTime@
		>`@contextX@,@contextY++@,#white,@loc.averageTime@
		>`@contextX@,@contextY++@,#white,@totaltime@

func DisplayDebuffs(offX, offY)
	?IsCombatArea()
		>`@offX@,@offY@,#white,ascii
╔Debuffs╗
║       ║
║       ║
║       ║
║       ║
║       ║
╚═══════╝
asciiend
		var contextX = offX + 1
		var contextY = offY + 1

		?foe.debuffs.string = "debuff_chill"
			var framesLeft = ParseDebuffFrames("debuff_chill")
			>`@contextX@,@contextY++@,#cyan,ICE @framesLeft@
		:
			>`@contextX@,@contextY++@,#white,ICE 0

		?foe.debuffs.string = "debuff_damage"
			var framesLeft = ParseDebuffFrames("debuff_damage")
			>`@contextX@,@contextY++@,#green,PSN @framesLeft@
		:
			>`@contextX@,@contextY++@,#white,PSN 0

		?foe.debuffs.string = "debuff_dot"
			var framesLeft = ParseDebuffFrames("debuff_dot")
			>`@contextX@,@contextY++@,#red,FIR @framesLeft@
		:
			>`@contextX@,@contextY++@,#white,FIR 0

		?foe.debuffs.string = "stun"
			var framesLeft = ParseDebuffFrames("stun")
			>`@contextX@,@contextY++@,#yellow,STN @framesLeft@
		:
			>`@contextX@,@contextY++@,#white,STN 0

		?foe.debuffs.string = "debuff_feeble"
			var framesLeft = ParseDebuffFrames("debuff_feeble")
			>`@contextX@,@contextY++@,#green,FBL @framesLeft@
		:
			>`@contextX@,@contextY++@,#white,FBL 0

func Equips_NonCombat()
	?item.GetCooldown("quarterstaff") = 0
		equip quarterstaff
		?item.CanActivate("quarterstaff")
			activate R
	:
		equipL trisk

		?pickup.distance < 15
			equipR star
		:
			equipR oro

func DashIfCan()
  ?foe.distance <= 16 & foe.distance >= 11
    ?item.GetCooldown("bash") <= 0
      equipR bash
		:?item.GetCooldown("quarterstaff") <= 0
			equip quarterstaff
			?item.CanActivate("quarterstaff")
			activate R
    :?item.GetCooldown("dash") <= 0
      equipR dash

	:?foe.distance > 6
		?item.GetCooldown("quarterstaff") <= 0
			equip quarterstaff
			?item.CanActivate("quarterstaff")
				activate R

func CanDodge()
	?item.GetCooldown("mind") <= 0
		return true
	:
		return false

func Dodge()
		equipR mind

func DodgeIfCan()
  ?CanDodge()
    Dodge()

func UsePotionIfCan()
  ?hp < 10
    activate potion

func UseBladeIfCan()
  ?foe.count >= 10
  ^&item.GetCooldown("blade") <= 0
    equip blade
		?item.CanActivate("blade")
			activate R

func UseMaskIfCan()
  ?item.GetCooldown("mask") <= 0 & foe.distance < 40 & foe.state ! 1
    equip mask
    ?item.CanActivate("mask")
			activate R

func ShouldApplyPoison()
  //var dbStr = foe.debuffs.string

  ?foe.debuffs.string ! "debuff_damage"
    return true
  :
		var framesLeftInt = ParseDebuffFrames("debuff_damage")

    ?foe.distance <= 6 & framesLeftInt < 15
			return true
    :?foe.distance <= 20 & framesLeftInt < 30
			return true
    :
      return false

func IsCombatArea()
	?loc.isQuest
		return false
	:
		return true

func ParseDebuffFrames(targetDebuffName)
	var debuffsString = foe.debuffs.string

	var debuffsStringArray = string.Split(debuffsString, ",")
	var targetDebuffString
	for value : debuffsStringArray
		?value = targetDebuffName
			targetDebuffString = value

	var targetDebuffStringFields = string.Split(targetDebuffString, ":")
	var targetDebuffNameIndex = targetDebuffStringFields.IndexOf(targetDebuffName)

	var framesLeftStr = targetDebuffStringFields[targetDebuffNameIndex+2]
	var framesLeftInt = int.Parse(framesLeftStr)

	return framesLeftInt
